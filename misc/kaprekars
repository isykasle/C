/*
Sort four digits in ascending order and store result in a number “asc”.
Sort four digits in descending order and store result in a number “desc”.
Subtract number larger number from smaller number, i.e., abs(asc – desc).
Repeat above three steps until the result of subtraction doesn’t become equal to the previous number.

*/


# include <stdio.h>
# include <stdbool.h>
# include <math.h>

int kaprekarRec(int n, int prev)
{
    int i,j,a,count=0;
    if (n == 0){
       return 0;
    }
    // Store current n as previous number
    prev = n;

    // Get four digits of given number
    int digits[4];
    for (i=0; i<4; i++)
    {
       digits[i] = n%10;
       n = n/10;
       count++;
    }
     // Get all four dgits in descending order
    // in the form of number "desc"
      for (i = 0; i < count; i++)
        {
            for (j = i + 1; j < count; j++)
            {
                if (digits[i] < digits[j])
                {
                    a = digits[i];
                    digits[i] = digits[j];
                    digits[j] = a;
                }
            }

        }
    int desc = 0;
    for (i=0; i<4; i++){
       desc = desc*10 + digits[i];
    }

    // Sort all four dgits in ascending order
    // And get in the form of number "asc"
      for (i = 0; i < count; ++i)
        {
            for (j = i + 1; j < count; ++j)
            {
                if (digits[i] > digits[j])
                {
                    a = digits[i];
                    digits[i] = digits[j];
                    digits[j] = a;
                }
            }

        }
    int asc = 0;
    for (i=0; i<4; i++){
       asc = asc*10 + digits[i];
     }



    //printf("%d =asc  %d:desc ",asc,desc);
    // Get the difference of two numbers
    int diff = abs(asc - desc);

    // If difference is same as previous, we have
    // reached kaprekar's constant
    if (diff == prev){
        return diff;
    }

    // Else recur
    return kaprekarRec(diff, prev);
}

// A wrapper over kaprekarRec()
int kaprekar(int n)
{
    int prev = 0;
    return kaprekarRec(n, prev);
}

// Driver code
int main()
{
    // Trying few four digit numbers, we
    // always get 6174
   printf("%d \n", kaprekar(1000));
    printf("%d \n",kaprekar(1112)) ;
    printf("%d\n",kaprekar(9812));
    return 0;
}
